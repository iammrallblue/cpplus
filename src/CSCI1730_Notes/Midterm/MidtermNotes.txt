/*
Phases of C++ Programs:
    1. Edit: (foo.cpp)
        Program is created in the editor and stored on disk
    2. Preprocess: (foo.cpp)
        Preprocessor program processes the code, and expands macros
    3. Compile: (.o file foo.o)
        Compiler creates object code and stores it on disk (.o file)
    4. Link: (a.out file 'foo')
        Linker links the object code with the C++ libraries, 
        stores in a.out on disk.
    *** 2,3,4 in compile(and link) (CC, g++)
    5. Load:
        Loader puts program in memory(RAM)
    6. Execute:
    *** 5,6 Run (load and execute ./foo, or /a.out)
        CPU takes each instruction and execute it,
        possily storing new data values in memory(RAM)
        as the program executes.
C++ Fundamental Data Types (signed and unsigned):
8bits = 1Byte (01010101)
Integers: (unsigned Integers) (bits in binary)
    unsigned int: 10u, 4bytes, 32bits (4*8)
    the max value of unsigned int: 0 ~ 4294967295 (2^32 - 1)
    unsigned int:
        1111 1111 1111 1111 1111 1111 1111 1111 = the max value - 1
        0000 0000 0000 0000 0000 0000 0000 0000 = the min value 0
    *** unsiged int == size_t;
    unsigned short:(short int) 2bytes, 16bits (2*8)
    unsigned long: (long int) 10L or  10uL, 4bytes, 32bits
    unsigned long long: 10uLL, 8bytes, at least 64bites
    unsigned char: 8bits 1Byte 
        the max values of unsigned char: 0 ~ 256 - 1 (2^8 - 1)
        1111 1111 = the max value of char: 256 - 1
        0000 0000 = the min value of char: 0
    char16_t: 2bytes at least 16bits 
    char32_t: 2bytes at least 32bits
    bool: 1bytes, 8bits
*** signed types, 1st number 1 presents negative number.
    1st number 0 presents positive number
*** unsigned all 8 bits are real binary no signs.
Integers: (signed Integers)
    Singed int: (int) 
        the max value of singed int: (the first number is 0 "-") 
            -2147483647 ~ 2147483647 (2^32)
    Binary: 二進制原碼 (Ex. +15 and -15)
        (+15) 0000 1111
        (-15) 1000 1111
    One's Complement: 二進制反碼
        (+15) 0000 1111
        (-15) 1111 0000
    Two's Complement: 二進制補碼
        (+15) 0000 1111
        (-15) 1111 0001
Floats:
    float: 4bytes, 32bits
    double: 8bytes, 64bites
    long double: 
Strings:
    string
Bitwise Operators: in 8 bits form
    Ex. 2 << -5 >> 2
        -5 >> 2
              1000 0101 -5(Binary原碼)
        1's C 1111 1010 -5(反碼)
        2's C 1111 1011 -5(補碼)
        -5 >> 2
              1111 1110 -2(補碼)
        1's C 1000 0001
        2's C 1000 0001
                      1
              1000 0010 -2(Binary原碼)5
        -5 << 2
              1000 0101 -5(Binary原碼)
        1's C 1111 1010 -5(反碼)
        2's C 1111 1011 -5(補碼)
        -5 << 2 
              1110 1100 -20(補碼)
        1's C 1001 0011 -20(反碼)
        2's C 1001 0100 
                      1
              1001 0101 -20(Binary原碼)

Function: pass by value (copy)
    The default argument passing mechanism
    int x = 5, y = 3, z; z = addition(5,3);
        1. The funcition receives a copy of data(values)
        2. Any changes the function makes to the parameter(s) 
            are to the local copy only (the changes are not 
            propagated back to the argument(s) in the function call)
Function: pass by reference
    taking references is more efficient than the version values.
    since it does not need to copy expensive-to-copy data.
    int duplicate(int &a, int &b, int &c){
        a *= 2; // a = a * 2;
        b *= 3; c *= 4;
        // modifies the values of variables a, b, and c, 
            the values of x, y, and z are affected.}
    // call duplicate()    int x=1,y=2,z=3;
    duplicate(x,y,z) // pass the variables x,y,z
        1. a, b, and c become "aliases" of the arguments passed 
            on the function call (x, y, and z) 
            and any change on a within the function is 
            actually modifying variable x,y,z outside the function
        2. The memory don't allocate for reference, b/c reference
            ONLY asks the addresses of variables. The reference ISNOT
            a variable.
        3. The compiler maps the parameter to the same address as the argument
        4. The function call and the function definition
             must be part of the same program
        5. It does not exist Null reference, reference MUST be referred to a valid 
            memory.
        6. initialized when it is declared. int &r = x; double & s = y;
    *** const References:
        string concat(const string &a, const string & b){ return a + b};
        by the const, modifying the values of a, anab is forbidden.
Function: pass by pointer or pass by address
    pass by pointer is just the address of a variable
    void triple(double *x) {*x = *x *3};
    // function call triple(&a);
    1. Argument, the address is found with the address of operator &
    2. the parameters must include the * as part of the variable definition
    3. the variable name must be dereferenced *x
        whenever it is used in the body of the function.
    4. the function parameter (x) is pointed to the function argument
        (a) in the function call.
    5. Any changes made indirectly through the parameter ( x )
         in the function body are propagated back to the argument ( a ) in the call
Prototypes:
    declaring before the main function.
Header Files: *.h 
    #ifndef ODDEVEN_H
    #define ODDEVEN_H
    #endif 
Compile commands:
    g++ -c -o main.o main.cpp
    g++ -c -o oddeven.o oddeven.cpp
    g++ -c -o driver oddeven.o main.o 
    ./driver // running

Array and String
    Create and initialized:
    int foo[] = {1,2,3,4};
    int foo[] {1,2,3,4};
    Access Array:
        foo[2] = 333; // replace new value
        x = foo[1]; // get value in index 1.
    Char array and string: (differences)
        const char ch[] {'H','e','l','l','o','\0'};
        const char my_word[] = "Hello"; // string literals
        // Undetermined size and w/o '\0' null character
        // will prin out "H e l l o p b  � �  % "
        const char* ch_ptr = ca;
    String:
        C++ string class internally uses character array to store character 
        but all memory management, allocation, and null termination 
        are handled by string class itself that is why it is easy to use
    Convert c-string to string:
        char c_ch[] = "some text";
        string my_str[] = c_ch;
        print as a c-string:
            cout << my_str.c_str();

Pointer:
    int x = 100;
    int * int_ptr; // Pointer declaration
    int_ptr = &x; // &x is the address of x in memory
    // pointer int_ptr is stored the address of x.
    dereference(*):
        not same pointer declaration
        dereferencing can modify the value of the variable
        *int_ptr = 1000; // this will change x's value to 1000
        // same as x = 1000;
    // Pointer and Char type 
    int main(int argc, char const *argv[]){
        char ch = '0';
        char *ch_ptr = &ch;
        // There is an issue when print out &ch or pointer ch_ptr
        // both result will be like "0xb���", unreadable code
        // solution for this issue, is convert them with (void *)
        cout << "&ch is: " << (void *)&ch << endl;       // the address of variable
        cout << "ch_ptr is: " << (void *)ch_ptr << endl; // the address of variable
        // result after added (void *) is 0x7ffee92c323f for both
        cout << "*ch_ptr is: " << *ch_ptr << endl;       // the value of variable
        return 0;} // main
    Null Pointer and void Pointer:
        int * ptr_1 = nullptr; nullptr == NULL;
        int * ptr_2 = 0; // nullptr == 0
        *** DON'T leave pointer "empty" after declaration
        *** so, recommand nullptr to prevent wild pointer
        A null pointer is a value that any pointer can take to
        represent that it is pointing to “nowhere"
        • A void pointer is a type of pointer that can point to
        somewhere without a specific type.
        • One refers to the value stored in the pointer, and the
        other to the type of data it points to.
    Reference and Pointer:
        int my_int = 1024;
        // Reference decalration
        int &ref_my_int = my_int;
        // reference MUST be initialized when it delcared.
        // A constant CANNOT assign to a reference
        int &ref_var = 10; // error
        const int &ref_var = 10; // correct
        // A reference does not need to verify whether
        // the binded object valid or invalid.
    The relationship of Reference and Pointer:
        1. Pointer can be pointed to any variable of the same type
            Once a reference is initialized to a variable, 
            it cannot be changed to refer to a variable object.
        2. Reference MUST initialize when it defined.
            Pointer can be initialized after declaration
        3. Reference CANNOT be assign Null value, ptr can.
    Pointer and Array:
        int my_arr[4] = {10,20,30,40}; // my_arr is array name, 
        int * my_ptr = my_arr;
        // can be considered as the first address
         of the first element in array
            my_arr == my_arr[0]; // true
            my_arr[i] == *(my_arr + i);
        how to get element in array:
            1. &my_arr[i+1], or *(my_ptr +2) get the element 30
            2. my_arr + 2 or my_ptr[2] or my_arr[2];
        how pointer is pointed to the array:
            1. int * my_ptr = my_arr;
            2. int * my_ptr = &my_arr[0];
        Pointer can be pointed to the element in the array:
            1. int * my_ptr = &my_arr[4]
            2. int * my_ptr = my_arr + 4;
    *** pointer can access the addresses of all elements in an Array.
    Pointer Arithmetic: char 1byte, short 2bytes, long 4bytes
        100, 200, and 300 are the addresses in memory,
        ++char_ptr, if char_ptr is 100, ++char_ptr will be 101
        ++short_ptr, if it is 200, ++short_ptr will be 202
        ++long_ptr, if it is 300, ++long_ptr will be 304
    Dereferencing: increment of the values pointed to.
        *** *p++ same as *(p++), *++p same as *(++p)
            ++*p same as ++(*p),
            (*p)++ // dereference, and post-increment the value it points to.
    Pointer and const:
        int x, y = 10;
        const int * yptr = &y;
        x = *yptr; // ok reading pointer yptr
        *yptr = x; // error, yptr has const-qualified.



Pointer (continued): 
    const Pointer to const:
        int x;
        int * p1 = &x; // non-const pointer to non-const int
  const int * p2 = &x; // non-const pointer to const int
        int * const p3 = &x; // const pointer to non-const int
  const int * const p4 = &x; // const pointer to const int
Dynamic Memory:
    Two Operators: new, new[], or delete, delete[]
        *** when "new" is involved to allocate in memory.
            after done, "delete" MUST be represented to delete
            the allocation in Memory, it's called release RAM.
        int *ptr; // *ptr will temply in stack
        ptr = new int; // ptr is ONLY 4bytes in Memory
            "new int", it will allocate in heapand ocuppied 4bytes int 
            first element ptr[0], or *ptr,
            second element ptr[1], or *(ptr + 1);
        Using delete to release "new" allocation in Memory
            delete ptr; // ONLY need execute one time. w/o []
        When involved "new" and "delete", DON't having two or more
        pointers pointe to same address. it might case delete multiple times.
    Ex. int num[5] is used 20bytes during compiling (runtime)
        int *ptr = new int; is used 4bytes, and in heap.
    valgrind: whatis valgrind
        valgrind (1) - a suite of tools for debugging and profiling programs
        to check  for memory leaks. valgrind ./ptr
Dynamic Memory and Array:
    int *int_arr = new int[10];
    // new operator return the address of the first element in Array.
    when done that, using delete [] int_arr to release RAM with [].
    //when using new[], it must have a delete[] to be a pair.
    *** for Null pointer, the delete operator is safe.
Stack:
    1. management by compiler, allocate and release automatically.
    2. stroing arguments of functions, the values of local variables
    3. first in last out.
Heap:
    1. management by developers, if devrs don't release, OS will do it
    2. 
Global (static area):
    1. stroing Global variables, and static variables
    2. release RAM after code terminated by OS.
Data Structre:
    
*/